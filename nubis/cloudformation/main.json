{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Nubis version of bugzilla.mozilla.org",
  "Parameters": {
    "ServiceName": {
      "Description": "Name of the service",
      "Type": "String"
    },
    "Environment": {
      "Description": "Environment we are deploying into",
      "Default": "sandbox",
      "Type": "String",
      "AllowedValues": [
        "prod",
        "stage",
        "sandbox"
      ],
      "ConstraintDescription": "Must specify prod, stage, or sandbox."
    },
    "SSHKeyName": {
      "Description": "Existing ssh key to deploy to EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "Type": "String"
    },
    "AmiId": {
      "Description": "The id of the ami for this region",
      "Type": "AWS::EC2::Image::Id"
    },
    "StorageVolumeSize": {
      "Description": "The storage size (in GB) of each member of the storage cluster",
      "Type": "String",
      "Default": "30"
    },
    "StacksVersion": {
      "Description": "Version of the Nubis Stacks",
      "Type": "String",
      "Default": "v1.0.1"
    }
  },
  "Mappings": {
    "EnvironmentMap": {
      "prod": {
        "WebInstanceType": "m4.xlarge",
        "PushInstanceType": "m4.xlarge",
        "QueueInstanceType": "m4.xlarge",
        "DBInstanceClass": "db.r3.4xlarge",
        "DBName": "bugs",
        "DBStorage": "256",
        "DBStorageType": "gp2",
        "SSLCertificate": "bugzilla.mozilla.org",
        "AutoScalingGroupMinSize": "2",
        "AutoScalingGroupDesiredCapacity": "2",
        "AutoScalingGroupMaxSize": "8"
      },
      "stage": {
        "WebInstanceType": "t2.medium",
        "PushInstanceType": "t2.medium",
        "QueueInstanceType": "t2.medium",
        "DBInstanceClass": "db.t2.medium",
        "DBName": "bugzilla_allizom_org",
        "DBStorage": "256",
        "DBStorageType": "gp2",
        "SSLCertificate": "wildcard.allizom.org",
        "AutoScalingGroupMinSize": "2",
        "AutoScalingGroupDesiredCapacity": "2",
        "AutoScalingGroupMaxSize": "4"
      },
      "sandbox": {
        "WebInstanceType": "t2.small",
        "PushInstanceType": "t2.small",
        "QueueInstanceType": "t2.small",
        "DBInstanceClass": "db.t2.small",
        "DBName": "bugzilla",
        "DBStorage": "32",
        "DBStorageType": "standard",
        "SSLCertificate": "arn:aws:iam::0000:server-certificate/not-set",
        "AutoScalingGroupMinSize": "1",
        "AutoScalingGroupDesiredCapacity": "1",
        "AutoScalingGroupMaxSize": "2"
      }
    }
  },
  "Conditions": {
    "DefaultSSLCertificate": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "sandbox"
      ]
    }
  },
  "Resources": {
    "DataBucketUUID": {
      "Type": "Custom::UUID",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": [
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":function:",
              "UUID"
            ]
          ]
        }
      }
    },
    "AttachmentsBucketUUID": {
      "Type": "Custom::UUID",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": [
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":function:",
              "UUID"
            ]
          ]
        }
      }
    },
    "EC2StackQueue": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "ec2.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AmiId": {
            "Ref": "AmiId"
          },
          "SSHKeyName": {
            "Ref": "SSHKeyName"
          },
          "IamRole": {
            "Ref": "BugzillaRole"
          },
          "Purpose": "queue-worker",
          "SecurityGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.EC2SecurityGroup"
            ]
          },
          "RollingUpgradePauseTime": "PT4M",
          "InstanceType": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "QueueInstanceType"
            ]
          },
          "AutoScalingGroupMinSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMinSize"
            ]
          },
          "AutoScalingGroupDesiredCapacity": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupDesiredCapacity"
            ]
          },
          "AutoScalingGroupMaxSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMaxSize"
            ]
          }
        }
      }
    },
    "EC2StackPush": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "ec2.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AmiId": {
            "Ref": "AmiId"
          },
          "SSHKeyName": {
            "Ref": "SSHKeyName"
          },
          "IamRole": {
            "Ref": "BugzillaRole"
          },
          "Purpose": "push-worker",
          "SecurityGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.EC2SecurityGroup"
            ]
          },
          "RollingUpgradePauseTime": "PT4M",
          "InstanceType": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "PushInstanceType"
            ]
          },
          "AutoScalingGroupMinSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMinSize"
            ]
          },
          "AutoScalingGroupDesiredCapacity": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupDesiredCapacity"
            ]
          },
          "AutoScalingGroupMaxSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMaxSize"
            ]
          }
        }
      }
    },
    "EC2Stack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "ec2.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "Purpose": "webserver",
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AmiId": {
            "Ref": "AmiId"
          },
          "SSHKeyName": {
            "Ref": "SSHKeyName"
          },
          "IamRole": {
            "Ref": "BugzillaRole"
          },
          "RollingUpgradePauseTime": "PT4M",
          "InstanceType": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "WebInstanceType"
            ]
          },
          "ELB": {
            "Fn::GetAtt": [
              "ELBStack",
              "Outputs.ELB"
            ]
          },
          "AutoScalingGroupMinSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMinSize"
            ]
          },
          "AutoScalingGroupDesiredCapacity": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupDesiredCapacity"
            ]
          },
          "AutoScalingGroupMaxSize": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "AutoScalingGroupMaxSize"
            ]
          }
        }
      }
    },
    "AutoScalingStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "autoscaling-cpu.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "CPUAlarmHighThreshold": "75",
          "CPUAlarmLowThreshold": "25",
          "AutoScalingGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.AutoScalingGroup"
            ]
          }
        }
      }
    },
    "AutoScalingStackQueue": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "autoscaling-cpu.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "CPUAlarmHighThreshold": "75",
          "CPUAlarmLowThreshold": "25",
          "AutoScalingGroup": {
            "Fn::GetAtt": [
              "EC2StackQueue",
              "Outputs.AutoScalingGroup"
            ]
          }
        }
      }
    },
    "AutoScalingStackPush": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "autoscaling-cpu.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "CPUAlarmHighThreshold": "75",
          "CPUAlarmLowThreshold": "25",
          "AutoScalingGroup": {
            "Fn::GetAtt": [
              "EC2StackPush",
              "Outputs.AutoScalingGroup"
            ]
          }
        }
      }
    },
    "ELBStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "elb.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "SSLCertificate": {
            "Fn::If": [
              "DefaultSSLCertificate",
              {
                "Fn::FindInMap": [
                  "EnvironmentMap",
                  {
                    "Ref": "Environment"
                  },
                  "SSLCertificate"
                ]
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":server-certificate/",
                    {
                      "Fn::FindInMap": [
                        "EnvironmentMap",
                        {
                          "Ref": "Environment"
                        },
                        "SSLCertificate"
                      ]
                    }
                  ]
                ]
              }
            ]
          },
          "ElbHealthTarget": "HTTP:80/?no-ssl-rewrite&elb-health-check"
        }
      }
    },
    "RDSStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "rds-mysql.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StacksVersion": {
            "Ref": "StacksVersion"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "DBInstanceClass": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "DBInstanceClass"
            ]
          },
          "DBStorageType": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "DBStorageType"
            ]
          },
          "AllocatedStorage": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "DBStorage"
            ]
          },
          "MasterUsername": "bugzilla",
          "ReadOnlySlave": "true",
          "DBName": {
            "Fn::FindInMap": [
              "EnvironmentMap",
              {
                "Ref": "Environment"
              },
              "DBName"
            ]
          },
          "EC2SecurityGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.EC2SecurityGroup"
            ]
          }
        }
      }
    },
    "MemcacheStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "memcache.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "EC2SecurityGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.GroupId"
            ]
          }
        }
      }
    },
    "Route53Stack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "route53.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "DNSName": {
            "Ref": "AWS::StackName"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "ELBStack": {
            "Fn::GetAtt": [
              "ELBStack",
              "Outputs.DNSName"
            ]
          }
        }
      }
    },
    "StorageStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "storage.template"
            ]
          ]
        },
        "TimeoutInMinutes": "60",
        "Parameters": {
          "StacksVersion": {
            "Ref": "StacksVersion"
          },
          "StackName": {
            "Ref": "AWS::StackName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "SSHKeyName": {
            "Ref": "SSHKeyName"
          },
          "VolumeSize": {
            "Ref": "StorageVolumeSize"
          },
          "InstanceType": "m3.medium",
          "EC2SecurityGroup": {
            "Fn::GetAtt": [
              "EC2Stack",
              "Outputs.GroupId"
            ]
          }
        }
      }
    },
    "DataBucket": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "s3-bucket.template"
            ]
          ]
        },
        "Parameters": {
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AccessControl": "Private",
          "VersioningConfiguration": "Enabled",
          "IamRole": {
            "Ref": "BugzillaRole"
          },
          "BucketName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "data",
                {
                  "Fn::GetAtt": [
                    "DataBucketUUID",
                    "uuid"
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "AttachmentsBucket": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.amazonaws.com/nubis-stacks",
              {
                "Ref": "StacksVersion"
              },
              "s3-bucket.template"
            ]
          ]
        },
        "Parameters": {
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "TechnicalOwner": {
            "Ref": "TechnicalOwner"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "AccessControl": "Private",
          "VersioningConfiguration": "Enabled",
          "IamRole": {
            "Ref": "BugzillaRole"
          },
          "BucketName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "attachments",
                {
                  "Fn::GetAtt": [
                    "AttachmentsBucketUUID",
                    "uuid"
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "BugzillaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BugzillaSendEmailUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "SendMail",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ses:SendRawEmail",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "DataBucketUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "SyncData",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Fn::GetAtt": [
                              "DataBucket",
                              "Outputs.S3Bucket"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Fn::GetAtt": [
                              "DataBucket",
                              "Outputs.S3Bucket"
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SESUserAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "BugzillaSendEmailUser"
        }
      }
    },
    "DataBucketAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "DataBucketUser"
        }
      }
    },
    "MySQLParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "Bugzilla DB Parameter group for MySql 5.6",
        "Family": "MySQL5.6",
        "Parameters": {
          "innodb_log_file_size": "536870912",
          "max_allowed_packet": "536870912"
        },
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ELBDNSName": {
      "Description": "Consul: / ELB CNAME",
      "Value": {
        "Fn::GetAtt": [
          "ELBStack",
          "Outputs.DNSName"
        ]
      }
    },
    "Environment": {
      "Description": "Consul: config/ Environment we are deployed into",
      "Value": {
        "Ref": "Environment"
      }
    },
    "Server": {
      "Description": "Consul: config/ Server name",
      "Value": {
        "Fn::Join": [
          "",
          [
            "//",
            {
              "Fn::GetAtt": [
                "Route53Stack",
                "Outputs.DNSEntry"
              ]
            }
          ]
        ]
      }
    },
    "CanonicalServer": {
      "Description": "Consul: config/ Server url",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Route53Stack",
                "Outputs.DNSEntry"
              ]
            }
          ]
        ]
      }
    },
    "DBserver": {
      "Description": "Consul: config/ Database endpoint",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.RDSEndpoint"
        ]
      }
    },
    "ShadowDBHost": {
      "Description": "Consul: config/ Slave Database endpoint",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.SlaveRDSEndpoint"
        ]
      }
    },
    "DBname": {
      "Description": "Consul: config/ Database name",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.RDSName"
        ]
      }
    },
    "ShadowDBName": {
      "Description": "Consul: config/ Slave Database name",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.RDSName"
        ]
      }
    },
    "DBuser": {
      "Description": "Consul: config/ Database user",
      "Value": {
        "Fn::GetAtt": [
          "RDSStack",
          "Outputs.RDSUser"
        ]
      }
    },
    "MemCachedEndpoint": {
      "Description": "Consul: config/ Database user",
      "Value": {
        "Fn::GetAtt": [
          "MemcacheStack",
          "Outputs.Endpoint"
        ]
      }
    },
    "MemCachedPort": {
      "Description": "Consul: config/ Database user",
      "Value": {
        "Fn::GetAtt": [
          "MemcacheStack",
          "Outputs.Port"
        ]
      }
    },
    "S3AttachmentsBucket": {
      "Description": "Consul: config/ Attachments Bucket Name",
      "Value": {
        "Fn::GetAtt": [
          "AttachmentsBucket",
          "Outputs.S3Bucket"
        ]
      }
    },
    "S3DataBucket": {
      "Description": "Consul: config/ Data Bucket Name",
      "Value": {
        "Fn::GetAtt": [
          "DataBucket",
          "Outputs.S3Bucket"
        ]
      }
    },
    "SESUser": {
      "Description": "Consul: config/SMTP/ SMTP Username",
      "Value": {
        "Ref": "SESUserAccessKey"
      }
    },
    "SESPassword": {
      "Description": "Consul: config/SMTP/ SMTP Password",
      "Value": {
        "Fn::GetAtt": [
          "SESUserAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "SESServer": {
      "Description": "Consul: config/SMTP/ SMTP Server",
      "Value": {
        "Fn::Join": [
          ".",
          [
            "email-smtp",
            {
              "Ref": "AWS::Region"
            },
            "amazonaws.com"
          ]
        ]
      }
    },
    "DataBucketAccessKey": {
      "Description": "Data Sync Access Key",
      "Value": {
        "Ref": "DataBucketAccessKey"
      }
    },
    "DataBucketSecretKey": {
      "Description": "Data Sync Secret Key",
      "Value": {
        "Fn::GetAtt": [
          "DataBucketAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "EC2SecurityGroup": {
      "Description": "SecurityGroup for EC2 nodes",
      "Value": {
        "Fn::GetAtt": [
          "EC2Stack",
          "Outputs.EC2SecurityGroup"
        ]
      }
    }
  }
}
